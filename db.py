# -*- coding: utf-8 -*-
"""Db.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TRrqzTmiA1Ta901bxF1EddktPH4UZoRT
"""



import os
import dash
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
from dash import Dash, dcc, html, dash_table # import the dash module
from dash.dependencies import Input, Output
current_dir = os.path.dirname(__file__)
# file_path = os.path.join(current_dir,'Quari.csv')
file_path="https://github.com/surendra-gvsr/db/blob/main/Quari.csv"
print(file_path)
df = pd.read_csv(file_path)

df = df[df['Area'] != 'Not Found']

df['Quantity'] = df['Quantity '].str.replace('--','0').astype(float)
df['Price'] = df['Price'].replace('[\$,%-]', '', regex=True)
df['Price'] = pd.to_numeric(df['Price'], errors='coerce') #changed to handle empty strings
df['Total'] = df['Total'].replace('[\$,%-]', '', regex=True)
df['Total'] = pd.to_numeric(df['Total'], errors='coerce') #changed to handle empty strings
app = dash.Dash(__name__)
server=app.server
# Layout of the dashboard
app.layout = html.Div([
    html.H1("Retailer and Location Sales Dashboard"),

    dcc.Dropdown(
        id='retailer-dropdown',
        options=[{'label': retailer, 'value': retailer} for retailer in df['Retailer'].unique()],
        placeholder="Select a Retailer"
    ),

    dcc.Dropdown(
        id='location-dropdown',
        placeholder="Select a Location"
    ),

    dcc.Dropdown(
        id='year-dropdown',
        options=[{'label': str(year), 'value': year} for year in df['Year'].unique()],
        placeholder="Select a Year"
    ),

    dcc.Dropdown(
        id='month-dropdown',
        options=[{'label': str(month), 'value': month} for month in df['Month'].unique()],
        placeholder="Select a Month"
    ),

    html.Div(id='total-sales'),
    dash_table.DataTable(id='volume-by-product')
])

# Callback to update locations based on selected retailer
@app.callback(
    Output('location-dropdown', 'options'),
    Input('retailer-dropdown', 'value')
)
def set_locations(selected_retailer):
    if selected_retailer is None:
        return []
    locations = df[df['Retailer'] == selected_retailer]['Location'].unique()
    return [{'label': location, 'value': location} for location in locations]

# Callback to update total sales and volume by product
@app.callback(
    [Output('total-sales', 'children'),
     Output('volume-by-product', 'data'),
     Output('volume-by-product', 'columns')],
    [Input('retailer-dropdown', 'value'),
     Input('location-dropdown', 'value'),
     Input('year-dropdown', 'value'),
     Input('month-dropdown', 'value')]
)
def update_output(selected_retailer, selected_location, selected_year, selected_month):
    filtered_df = df.copy()

    if selected_retailer:
        filtered_df = filtered_df[filtered_df['Retailer'] == selected_retailer]
    if selected_location:
        filtered_df = filtered_df[filtered_df['Location'] == selected_location]
    if selected_year:
        filtered_df = filtered_df[filtered_df['Year'] == selected_year]
    if selected_month:
        filtered_df = filtered_df[filtered_df['Month'] == selected_month]

    if filtered_df.empty:
        return "No data available for the given filters.", [], []

    total_sales = filtered_df['Total'].sum()
    volume_by_product = filtered_df.groupby('Product')['Quantity'].sum().reset_index()

    columns = [{"name": i, "id": i} for i in volume_by_product.columns]
    data = volume_by_product.to_dict('records')

    return f"Total Sales: ${total_sales:,.2f}", data, columns

if __name__ == '__main__':
    app.run_server(debug=True)
